---
name: gradle-build-pipeline
description: "Checkout, build and tag gradle projects"
inputs:
  aws_region:
    description: "The AWS region to deploy to"
    required: false
    default: ""
  aws_role:
    description: "The AWS role for the connection"
    required: false
    default: ""
  chart_name:
    description: "The name of the chart to deploy "
    required: true
  chart_version:
    description: "The version of the chart to deploy "
    required: true
  clean_up:
    description: "Tell Helm to clean up failed deployment. Disable only while debugging deployment issue."
    required: false
    default: "true"
  cluster_name:
    description: "The name of the cluster"
    required: false
    default: ""
  component_name:
    description: "The name of the component being deployed, it is the helm release name;
                  it also serves as the default base name for the kubernetes namespace. "
    required: true
  dry_run:
    description: "Set to true to perform a helm dry-run deployment"
    required: false
    default: "false"
  github_token:
    description: "The authentication token"
    required: true
  helm_registry:
    description: "The registry to retrieve Helm charts from"
    required: true
  helm_value_command:
    description: "Name of a file providing a set of (action key value) for additional values to helm"
    required: false
    default: "src/main/helm/read-cloudFormation-values.cmd"
  locator_url:
    description: "The URL of properties file that defines aws_region, aws_role,cluster_name."
    required: false
    default: ""
  locator_url_bearer:
    description: "A authentication bearer with read access to locator_url."
    required: false
    default: ""
  locator_url_token:
    description: "An authentication token with read access to locator_url."
    required: false
    default: ""
  namespace:
    description: "The name of the namespace to deploy to. Optional - at least for now"
    required: false
    default: ""
  post_install_parameter:
    description: "Name of a json file providing additional parameters for the post-install CloudFormation stacks"
    required: false
    default: ""
  pre_install_parameter:
    description: "Name of a json file providing additional parameters for the pre-install CloudFormation stacks"
    required: false
    default: ""
  purpose:
    description: "The purpose in the deployment pipeline (dev, prod, ...)"
    required: true
  timeout:
    description: "time to wait for the deployment to succeed (a Go duration, default 5m0s)"
    required: false
    default: "5m0s"
  verbose:
    description: "enable verbose output"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: "Extract purpose configuration"
      id: purpose_config
      uses: Arda-cards/purpose-configuration-action@v1
      with:
        aws_region: "${{ inputs.aws_region }}"
        aws_role: "${{ inputs.aws_role }}"
        cluster_name: "${{ inputs.cluster_name }}"
        locator_url: "${{ inputs.locator_url }}"
        locator_url_token: "${{ inputs.locator_url_token }}"
    - uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: "${{ steps.purpose_config.outputs.aws_role }}"
        aws-region: "${{ steps.purpose_config.outputs.aws_region }}"
        role-duration-seconds: 900
    - name: "Deployment gate"
      if: ${{ steps.purpose_config.outputs.deployment_gate != 'none' }}
      uses: Arda-cards/deployment-gate-action@v1
      with:
        aws_region: "${{ steps.purpose_config.outputs.aws_region }}"
        chart_name: "${{ inputs.chart_name }}"
        chart_version: "${{ inputs.chart_version }}"
        cluster_name: "${{ steps.purpose_config.outputs.cluster_name }}"
        deployment_gate: "${{ steps.purpose_config.outputs.deployment_gate }}"
        mode: "request"
        purpose: "${{ inputs.purpose }}"
    - name: "Extract account information"
      id: account_information
      shell: bash
      run: |
        [ "${RUNNER_DEBUG}" == 1 ] && set -xv
        set -u

        readonly name=$(aws --query AccountName --output text account get-account-information)
        echo "name=${name}" >>"${GITHUB_OUTPUT}"
    - name: "Add default CloudFormation Parameters"
      id: cloudformation_parameter
      shell: bash
      run: |
        [ "${RUNNER_DEBUG}" == 1 ] && set -xv
        set -u

        maybeAppend() {
          echo "maybeAppend ${2} to ${1}"
          mv "${1}" in.json
          jq --arg key "${2}" --arg value "${3}" \
            'if
              map(.ParameterKey) | index($key) == null
            then
              . + [{"ParameterKey": $key, "ParameterValue": $value}]
            else
              .
            end' in.json > "${1}"
          rm in.json
        }
        
        standard_parameters() {
          if [ -z "${1}" ]; then
            file_name="${RUNNER_TEMP}/${2}.json"
            echo '[]' > "${file_name}"
          else
            file_name="$(realpath "${1}")"
          fi
          echo "${2}=file:///${file_name}" >>"${GITHUB_OUTPUT}"

          maybeAppend "${file_name}" "Component" "${{ inputs.component_name }}"
          maybeAppend "${file_name}" "Infrastructure" "${{ steps.account_information.outputs.name }}"
          maybeAppend "${file_name}" "Namespace" "${{ inputs.namespace }}"
          maybeAppend "${file_name}" "Purpose" "${{ inputs.purpose }}"
        }

        standard_parameters "${{ inputs.pre_install_parameter }}" pre_install_parameter
        standard_parameters "${{ inputs.post_install_parameter }}" post_install_parameter
    - name: "Parametrize Helm values from CloudFormationExports"
      id: helm_value
      if: ${{ inputs.helm_value_command }}
      shell: bash
      run: |
        [ "${RUNNER_DEBUG}" == 1 ] && set -xv
        set -u

        function readExport {
          local value="$(aws cloudformation list-exports --query "Exports[?Name=='${{ steps.account_information.outputs.name }}-${2}'].Value" --output text)"
          yq -i "${1} = \"${value#*|::|}\"" "${3}"
        }

        # ARN for secret name:
        # arn:aws:secretsmanager:${region}:${account}:secret:${secret_name}-${version}
        function readSecretName {
          local value="$(aws cloudformation list-exports --query "Exports[?Name=='${{ steps.account_information.outputs.name }}-${2}'].Value" --output text)"
          local secret_arn="${value#*|::|}"
          local secret_long_name=${secret_arn##*:secret:}
          yq -i "${1} =\"${secret_long_name%-*}\"" "${3}"
        }

        file_name="${RUNNER_TEMP}/cloudFormation-values.yaml"
        echo "file_name=${file_name}" >>${GITHUB_OUTPUT}
        echo "---" >|${file_name}
        yq -i ".global.infrastructure = \"${{ steps.account_information.outputs.name }}\"" ${file_name}

        if [[ -f ${{ inputs.helm_value_command }} && -r ${{ inputs.helm_value_command }} ]]; then
          # read file line by line and write command to set *Key* to *Action* *Value*.   Field separator is ":"

          COMPONENT="${{ inputs.component_name }}" \
          INFRASTRUCTURE="${{ steps.account_information.outputs.name }}" \
          NAMESPACE="${{ inputs.namespace }}" \
          PURPOSE="${{ inputs.purpose }}" \
          envsubst '${COMPONENT} ${INFRASTRUCTURE} ${NAMESPACE} ${PURPOSE}' <"${{ inputs.helm_value_command }}" |
          while read -r a k v; do
            case $a in
              copyValue)
                yq -i "${k} = \"${v}\"" ${file_name}
              ;;
              readExport)
                readExport $k $v ${file_name}
              ;;
              readSecretName)
                readSecretName $k $v ${file_name}
              ;;
              *)
                echo "::error function $f unkonwn (readExport, readSecretName)"
                exit 1
              ;;
            esac
          done

          echo "${file_name}:"
          cat "${file_name}"
        fi
    - name: "Pre-install cloudformation"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      if: ${{ inputs.dry_run == 'false' && hashFiles('src/main/cloudformation/pre-install.cfn.yml') != '' }}
      with:
        capabilities: "CAPABILITY_NAMED_IAM"
        name: "${{ steps.account_information.outputs.name }}-${{ inputs.namespace }}-pre"
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "${{ steps.cloudformation_parameter.outputs.pre_install_parameter }}"
        tags: "[ { \"Key\":\"Infrastructure\", \"Value\":\"${{ steps.account_information.outputs.name }}\" } ]"
        template: "src/main/cloudformation/pre-install.cfn.yml"
    - uses: Arda-cards/helm-deploy-action@v5
      with:
        aws_region: "${{ steps.purpose_config.outputs.aws_region }}"
        chart_name: "${{ inputs.chart_name }}"
        chart_version: "${{ inputs.chart_version }}"
        clean_up: ${{ inputs.clean_up }}
        cluster_name: "${{ steps.purpose_config.outputs.cluster_name }}"
        component_name: "${{ inputs.component_name }}"
        dry_run: "${{ inputs.dry_run }}"
        github_token: "${{ inputs.github_token }}"
        helm_registry: "${{ inputs.helm_registry }}"
        namespace: "${{ inputs.namespace }}"
        purpose: "${{ inputs.purpose }}"
        timeout: "${{ inputs.timeout }}"
        value_file: "${{ steps.helm_value.outputs.file_name }}"
        verbose: "${{ inputs.verbose }}"
    - name: "Post-install cloudformation"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      if: ${{ inputs.dry_run == 'false' && hashFiles('src/main/cloudformation/post-install.cfn.yml') != '' }}
      with:
        name: "${{ steps.account_information.outputs.name }}-${{ inputs.namespace }}-post"
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "${{ steps.cloudformation_parameter.outputs.post_install_parameter }}"
        tags: "[ { \"Key\":\"Infrastructure\", \"Value\":\"${{ steps.account_information.outputs.name }}\" } ]"
        template: "src/main/cloudformation/post-install.cfn.yml"
