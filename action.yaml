---
name: gradle-build-pipeline
description: "Checkout, build and tag gradle projects"
inputs:
  aws_role:
    description: "The AWS role for the connection"
    required: true
  aws_region:
    description: "The AWS region to deploy to"
    required: true
  chart_name:
    description: "The name of the chart to deploy "
    required: true
  chart_version:
    description: "The version of the chart to deploy "
    required: true
  clean_up:
    description: "Tell Helm to clean up failed deployment. Disable only while debugging deployment issue."
    required: false
    default: "true"
  post_install_parameter:
    description: "Name of a json file providing additional parameters for the post-install CloudFormation stacks"
    required: false
    default: ""
  pre_install_parameter:
    description: "Name of a json file providing additional parameters for the pre-install CloudFormation stacks"
    required: false
    default: ""
  cluster_name:
    description: "The name of the cluster"
    required: true
  dry_run:
    description: "Set to true to perform a helm dry-run deployment"
    required: false
    default: "false"
  github_token:
    description: "The authentication token"
    required: true
  helm_registry:
    description: "The registry to retrieve Helm charts from"
    required: true
  helm_value:
    description: "Name of a helm value.yaml file providing additional values to helm"
    required: false
    default: ""
  image_pull_secret:
    description: "The secrets for kubernetes to pull images from the OCI registry"
    required: true
    deprecationMessage: "Use the helm_value/cloudformation_parameter to pass if necessary"
  module_name:
    description: "The name of the module being deployed, it is the helm release name;
                  it also serves as the default base name for the kubernetes namespace. "
    required: true
  namespace:
    description: "The name of the namespace to deploy to."
    required: true
  phase:
    description: "The phase in the deployment pipeline (dev, prod, ...)"
    required: true
  timeout:
    description: "time to wait for the deployment to succeed (a Go duration, default 5m0s)"
    required: false
    default: "5m0s"
  verbose:
    description: "enable verbose output"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role }}
        aws-region: ${{ inputs.aws_region }}
        role-duration-seconds: 900
    - id: account_information
      name: "Extract account information"
      shell: bash
      run: |
        [ "${{ runner.debug }}" == 1 ] && set -xv
        set -u

        readonly name=$(aws --query AccountName --output text account get-account-information)
        echo "name=${name}" >>"${GITHUB_OUTPUT}"
    - name: "CloudFormation Parameters"
      id: cloudformation_parameter
      shell: bash
      run: |
        [ "${{ runner.debug }}" == 1 ] && set -xv
        set -u

        maybeAppend() {
          echo "maybeAppend $2 to $1"
          mv "${1}" in.json
          jq --arg key "${2}" --arg value "${3}" \
            'if
              map(.ParameterKey) | index($key) == null
            then
              . + [{"ParameterKey": $key, "ParameterValue": $value}]
            else
              .
            end' in.json > "${1}"
          rm in.json
        }
        
        standard_parameters() {
          if [ -z "$1" ]; then
            file_name="${RUNNER_TEMP}/${2}.json"
            echo '[]' > "${file_name}"
          else
            file_name="$(realpath "$1")"
          fi
          echo "$2=file:///$file_name" >>"${GITHUB_OUTPUT}"
  
          maybeAppend "${file_name}" "Environment" "${{ steps.account_information.outputs.name }}"
          maybeAppend "${file_name}" "Module" "${{ inputs.module_name }}"
          maybeAppend "${file_name}" "Namespace" "${{ inputs.namespace }}"
        }

        standard_parameters "${{ inputs.pre_install_parameter }}" pre_install_parameter
        standard_parameters "${{ inputs.post_install_parameter }}" post_install_parameter

    - name: "Pre-install cloudformation"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      if: ${{ hashFiles('src/main/cloudformation/pre-install.cfn.yml') != '' }}
      with:
        capabilities: "CAPABILITY_NAMED_IAM"
        name: ${{ steps.account_information.outputs.name }}-${{ inputs.namespace }}-pre
        no-fail-on-empty-changeset: "1"
        parameter-overrides: ${{ steps.cloudformation_parameter.outputs.pre_install_parameter }}
        tags: "[ { \"Key\":\"Environment\", \"Value\":\"${{ steps.account_information.outputs.name }}\" }]"
        template: src/main/cloudformation/pre-install.cfn.yml
    - uses: Arda-cards/helm-deploy-action@v3
      with:
        aws_region: ${{ inputs.aws_region }}
        chart_name: ${{ inputs.chart_name }}
        chart_version: ${{ inputs.chart_version }}
        clean_up: ${{ inputs.clean_up }}
        cluster_name: ${{ inputs.cluster_name }}
        github_token: ${{ inputs.github_token }}
        helm_registry: ${{ inputs.helm_registry }}
        module_name: ${{ inputs.module_name }}
        namespace: ${{ inputs.namespace }}
        phase: ${{ inputs.phase }}
        value_file: ${{ inputs.helm_value }}
        verbose: true
    - name: "Post-install cloudformation"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      if: ${{ hashFiles('src/main/cloudformation/post-install.cfn.yml') != '' }}
      with:
        name: ${{ steps.account_information.outputs.name }}-${{ inputs.namespace }}-post
        no-fail-on-empty-changeset: "1"
        parameter-overrides: ${{ steps.cloudformation_parameter.outputs.post_install_parameter }}
        tags: "[ { \"Key\":\"Environment\", \"Value\":\"${{ steps.account_information.outputs.name }}\" }]"
        template: src/main/cloudformation/post-install.cfn.yml
